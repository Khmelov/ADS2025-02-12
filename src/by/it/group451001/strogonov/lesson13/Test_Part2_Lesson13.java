package by.it.group451001.strogonov.lesson13;

import by.it.HomeWork;
import org.junit.Test;

@SuppressWarnings("NewClassNamingConvention")
public class Test_Part2_Lesson13 extends HomeWork {

    @Test
    public void testGraphA() {
        run("0 -> 1", true).include("0 1");
        run("0 -> 1, 1 -> 2", true).include("0 1 2");
        run("0 -> 2, 1 -> 2, 0 -> 1", true).include("0 1 2");
        run("0 -> 2, 1 -> 3, 2 -> 3, 0 -> 1", true).include("0 1 2 3");
        run("1 -> 3, 2 -> 3, 2 -> 3, 0 -> 1, 0 -> 2", true).include("0 1 2 3");
        run("0 -> 1, 0 -> 2, 0 -> 2, 1 -> 3, 1 -> 3, 2 -> 3", true).include("0 1 2 3");
        run("A -> B, A -> C, B -> D, C -> D", true).include("A B C D");
        run("A -> B, A -> C, B -> D, C -> D, A -> D", true).include("A B C D");

        // ДОПОЛНИТЕЛЬНЫЕ ТЕСТЫ:

        // 9. Граф с числовыми вершинами не по порядку
        run("5 -> 3, 5 -> 7, 3 -> 2, 7 -> 3", true).include("5 7 3 2");

        // 10. Граф где лексикографический порядок важен (буквы)
        run("C -> A, C -> B, A -> D, B -> D", true).include("C A B D");

        // 11. Граф с разными вершинами (числа и буквы)
        run("1 -> A, 2 -> B, A -> 3, B -> 3", true).include("1 2 A B 3");

        // 12. Сложный граф с несколькими путями
        run("0 -> 1, 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 4, 3 -> 5", true).include("0 1 2 3 4 5");

        // 13. Граф с "алфавитным" порядком вершин
        run("X -> Y, X -> Z, Y -> W, Z -> W", true).include("X Y Z W");

        // 14. Граф где вершины не в лексикографическом порядке
        run("M -> K, M -> P, K -> R, P -> R", true).include("M K P R");

        // 15. Большой граф с числами
        run("0 -> 1, 0 -> 2, 1 -> 3, 1 -> 4, 2 -> 5, 2 -> 6, 3 -> 7, 4 -> 7, 5 -> 7, 6 -> 7", true)
                .include("0 1 2 3 4 5 6 7");

        // 16. Граф с двузначными числами
        run("10 -> 20, 10 -> 30, 20 -> 40, 30 -> 40", true).include("10 20 30 40");

        // 17. Смешанный граф с числами и буквами
        run("A1 -> B2, A1 -> C3, B2 -> D4, C3 -> D4", true).include("A1 B2 C3 D4");

        // 18. Граф с вершинами разной длины
        run("start -> middle1, start -> middle2, middle1 -> end, middle2 -> end", true)
                .include("start middle1 middle2 end");

        // 19. Граф с обратным лексикографическим порядком
        run("Z -> X, Z -> Y, X -> W, Y -> W", true).include("Z X Y W");

        // 20. Граф с повторяющимися зависимостями
        run("alpha -> beta, alpha -> gamma, beta -> delta, gamma -> delta, alpha -> delta", true)
                .include("alpha beta gamma delta");

        // 21. Сложный граф с ветвлениями
        run("root -> left, root -> right, left -> leaf1, left -> leaf2, right -> leaf3, right -> leaf4", true)
                .include("root left right leaf1 leaf2 leaf3 leaf4");

        // 22. Граф с минимальными различиями в именах вершин
        run("node1 -> node2, node1 -> node3, node2 -> node4, node3 -> node4", true)
                .include("node1 node2 node3 node4");

        // 23. Граф с цифрами в конце имен
        run("task1 -> task2, task1 -> task3, task2 -> task4, task3 -> task4", true)
                .include("task1 task2 task3 task4");

        // 24. Граф где порядок важен (тест на устойчивость алгоритма)
        run("first -> second, first -> third, second -> fourth, third -> fourth, second -> fifth", true)
                .include("first second third fifth fourth");

        // 25. Граф с максимальным количеством вершин
        run("0 -> 1, 0 -> 2, 0 -> 3, 1 -> 4, 2 -> 4, 3 -> 4, 4 -> 5, 4 -> 6, 4 -> 7", true)
                .include("0 1 2 3 4 5 6 7");
    }

    @Test
    public void testGraphB() {
        // Исходные тесты
        run("0 -> 1", true).include("no").exclude("yes");
        run("0 -> 1, 1 -> 2", true).include("no").exclude("yes");
        run("0 -> 1, 1 -> 2, 2 -> 0", true).include("yes").exclude("no");

        // Дополнительные тесты

        // 4. Простой цикл из 2 вершин
        run("0 -> 1, 1 -> 0", true).include("yes").exclude("no");

        // 5. Граф с несколькими циклами
        run("0 -> 1, 1 -> 2, 2 -> 0, 2 -> 3, 3 -> 4, 4 -> 2", true).include("yes").exclude("no");

        // 6. Большой граф без циклов (дерево)
        run("0 -> 1, 0 -> 2, 1 -> 3, 1 -> 4, 2 -> 5, 2 -> 6", true).include("no").exclude("yes");

        // 7. Граф с изолированными вершинами и циклом
        run("0 -> 1, 1 -> 2, 2 -> 0, 3 -> 4, 5", true).include("yes").exclude("no");

        // 8. Сложный граф с циклами разной длины
        run("0 -> 1, 1 -> 2, 2 -> 3, 3 -> 1, 3 -> 4, 4 -> 5, 5 -> 3", true).include("yes").exclude("no");

        // 9. Граф с петлей (ребро в саму себя)
        run("0 -> 0", true).include("yes").exclude("no");

        // 10. Граф с петлей и обычными ребрами
        run("0 -> 0, 0 -> 1, 1 -> 2", true).include("yes").exclude("no");

        // 11. Две отдельные компоненты связности (одна с циклом, одна без)
        run("0 -> 1, 1 -> 2, 2 -> 0, 3 -> 4, 4 -> 5", true).include("yes").exclude("no");

        // 12. Граф без циклов с большим количеством вершин
        run("0 -> 1, 0 -> 2, 1 -> 3, 1 -> 4, 2 -> 5, 3 -> 6, 4 -> 7, 5 -> 8", true).include("no").exclude("yes");

        // 13. Граф где цикл находится не в начале
        run("0 -> 1, 1 -> 2, 2 -> 3, 3 -> 4, 4 -> 2", true).include("yes").exclude("no");

        // 14. Граф с перекрестными ребрами но без циклов
        run("0 -> 1, 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 4", true).include("no").exclude("yes");

        // 15. Сложный граф с несколькими путями но без циклов
        run("0 -> 1, 0 -> 2, 1 -> 3, 2 -> 4, 3 -> 5, 4 -> 5, 5 -> 6", true).include("no").exclude("yes");

        // СЛОЖНЫЕ И ОБЪЕМНЫЕ ТЕСТЫ:

        // 16. Большой граф с множественными пересекающимися циклами
        run("0 -> 1, 1 -> 2, 2 -> 3, 3 -> 4, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> 9, 9 -> 10, " +
                "10 -> 5, 5 -> 11, 11 -> 12, 12 -> 13, 13 -> 14, 14 -> 11, 11 -> 15, 15 -> 16, " +
                "16 -> 17, 17 -> 18, 18 -> 19, 19 -> 15", true).include("yes").exclude("no");

        // 17. Граф-решетка 4x4 с циклами
        run("0 -> 1, 1 -> 2, 2 -> 3, 0 -> 4, 1 -> 5, 2 -> 6, 3 -> 7, " +
                "4 -> 5, 5 -> 6, 6 -> 7, 4 -> 8, 5 -> 9, 6 -> 10, 7 -> 11, " +
                "8 -> 9, 9 -> 10, 10 -> 11, 8 -> 12, 9 -> 13, 10 -> 14, 11 -> 15, " +
                "12 -> 13, 13 -> 14, 14 -> 15, 15 -> 12", true).include("yes").exclude("no");

        // 18. Полный граф K5 (все вершины соединены со всеми) - много циклов
        run("0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, " +
                "1 -> 0, 1 -> 2, 1 -> 3, 1 -> 4, " +
                "2 -> 0, 2 -> 1, 2 -> 3, 2 -> 4, " +
                "3 -> 0, 3 -> 1, 3 -> 2, 3 -> 4, " +
                "4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3", true).include("yes").exclude("no");

        // 19. Дерево большой глубины без циклов (30 вершин)
        run("0 -> 1, 0 -> 2, 1 -> 3, 1 -> 4, 2 -> 5, 2 -> 6, " +
                "3 -> 7, 3 -> 8, 4 -> 9, 4 -> 10, 5 -> 11, 5 -> 12, 6 -> 13, 6 -> 14, " +
                "7 -> 15, 7 -> 16, 8 -> 17, 8 -> 18, 9 -> 19, 9 -> 20, 10 -> 21, 10 -> 22, " +
                "11 -> 23, 11 -> 24, 12 -> 25, 12 -> 26, 13 -> 27, 13 -> 28, 14 -> 29", true).include("no").exclude("yes");

        // 20. Сложный граф с "скрытым" циклом (ИСПРАВЛЕННЫЙ)
        run("0 -> 1, 1 -> 2, 2 -> 3, 3 -> 4, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> 9, " +
                "9 -> 10, 10 -> 11, 11 -> 12, 12 -> 13, 13 -> 14, 14 -> 15, 15 -> 16, " +
                "16 -> 17, 17 -> 18, 18 -> 19, 19 -> 20, 20 -> 21, 21 -> 22, 22 -> 23, " +
                "23 -> 24, 24 -> 25, 25 -> 26, 26 -> 27, 27 -> 28, 28 -> 29, 29 -> 30, " +
                "30 -> 31, 31 -> 32, 32 -> 33, 33 -> 34, 34 -> 35, 35 -> 36, 36 -> 37, " +
                "37 -> 38, 38 -> 39, 39 -> 40, 40 -> 41, 41 -> 42, 42 -> 43, 43 -> 44, " +
                "44 -> 45, 45 -> 46, 46 -> 47, 47 -> 48, 48 -> 49, 49 -> 25", true).include("yes").exclude("no");

        // 21. Граф с множественными независимыми циклами
        run("0 -> 1, 1 -> 2, 2 -> 0, " +
                "3 -> 4, 4 -> 5, 5 -> 3, " +
                "6 -> 7, 7 -> 8, 8 -> 6, " +
                "9 -> 10, 10 -> 11, 11 -> 9, " +
                "12 -> 13, 13 -> 14, 14 -> 12, " +
                "15 -> 16, 16 -> 17, 17 -> 15", true).include("yes").exclude("no");

        // 22. Граф-звезда с циклом в центре
        run("0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5, 0 -> 6, 0 -> 7, 0 -> 8, 0 -> 9, " +
                "1 -> 10, 2 -> 11, 3 -> 12, 4 -> 13, 5 -> 14, 6 -> 15, 7 -> 16, 8 -> 17, 9 -> 18, " +
                "10 -> 0", true).include("yes").exclude("no");

        // 23. Граф с циклами разной длины (от 3 до 10 вершин)
        run("0 -> 1, 1 -> 2, 2 -> 0, " + // цикл длины 3
                "3 -> 4, 4 -> 5, 5 -> 6, 6 -> 3, " + // цикл длины 4
                "7 -> 8, 8 -> 9, 9 -> 10, 10 -> 11, 11 -> 7, " + // цикл длины 5
                "12 -> 13, 13 -> 14, 14 -> 15, 15 -> 16, 16 -> 17, 17 -> 12, " + // цикл длины 6
                "18 -> 19, 19 -> 20, 20 -> 21, 21 -> 22, 22 -> 23, 23 -> 24, 24 -> 18", true).include("yes").exclude("no"); // цикл длины 7

        // 24. Очень плотный граф без циклов (топологически упорядоченный)
        run("0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5, " +
                "1 -> 6, 1 -> 7, 1 -> 8, 2 -> 6, 2 -> 7, 2 -> 8, 3 -> 6, 3 -> 7, 3 -> 8, 4 -> 6, 4 -> 7, 4 -> 8, 5 -> 6, 5 -> 7, 5 -> 8, " +
                "6 -> 9, 6 -> 10, 7 -> 9, 7 -> 10, 8 -> 9, 8 -> 10, " +
                "9 -> 11, 10 -> 11", true).include("no").exclude("yes");

        // 25. Граф с "бабочкой" - двумя циклами, соединенными через одну вершину
        run("0 -> 1, 1 -> 2, 2 -> 0, " + // первый цикл
                "0 -> 3, 3 -> 4, 4 -> 0, " + // второй цикл
                "1 -> 5, 5 -> 6, 6 -> 7, 7 -> 1, " + // третий цикл
                "4 -> 8, 8 -> 9, 9 -> 10, 10 -> 4", true).include("yes").exclude("no"); // четвертый цикл

        // 26. Граф с длинным путем, который в конце замыкается в цикл
        run("0 -> 1, 1 -> 2, 2 -> 3, 3 -> 4, 4 -> 5, 5 -> 6, 6 -> 7, 7 -> 8, 8 -> 9, " +
                "9 -> 10, 10 -> 11, 11 -> 12, 12 -> 13, 13 -> 14, 14 -> 15, 15 -> 16, " +
                "16 -> 17, 17 -> 18, 18 -> 19, 19 -> 20, 20 -> 21, 21 -> 22, 22 -> 23, " +
                "23 -> 24, 24 -> 25, 25 -> 26, 26 -> 27, 27 -> 28, 28 -> 29, 29 -> 30, " +
                "30 -> 31, 31 -> 32, 32 -> 33, 33 -> 34, 34 -> 35, 35 -> 36, 36 -> 37, " +
                "37 -> 38, 38 -> 39, 39 -> 40, 40 -> 41, 41 -> 42, 42 -> 43, 43 -> 44, " +
                "44 -> 45, 45 -> 46, 46 -> 47, 47 -> 48, 48 -> 49, 49 -> 25", true).include("yes").exclude("no");

        // 27. Граф с множеством петель
        run("0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, " +
                "0 -> 1, 1 -> 2, 2 -> 3, 3 -> 4, 4 -> 5", true).include("yes").exclude("no");

        // 28. Сложный граф с перекрестными связями но без циклов
        run("0 -> 1, 0 -> 2, 0 -> 3, " +
                "1 -> 4, 1 -> 5, 2 -> 4, 2 -> 6, 3 -> 5, 3 -> 6, " +
                "4 -> 7, 4 -> 8, 5 -> 7, 5 -> 9, 6 -> 8, 6 -> 9, " +
                "7 -> 10, 8 -> 10, 9 -> 10, " +
                "10 -> 11, 10 -> 12, 10 -> 13, " +
                "11 -> 14, 12 -> 15, 13 -> 16, " +
                "14 -> 17, 15 -> 17, 16 -> 17", true).include("no").exclude("yes");
    }

    @Test
    public void testGraphC() {
        // Пример из условия (цифры)
        run("1->2, 2->3, 3->1, 3->4, 4->5, 5->6, 6->4", true)
                .include("123\n456");

        // Пример из условия (буквы)
        run("C->B, C->I, I->A, A->D, D->I, D->B, B->H, H->D, D->E, H->E, E->G, A->F, G->F, F->K, K->G", true)
                .include("C\nABDHI\nE\nFGK");

        // 1. Две взаимные вершины (простая КСС)
        run("A->B, B->A", true)
                .include("AB");

        // 2. Три вершины, замкнутые в цикл
        run("A->B, B->C, C->A", true)
                .include("ABC");

        // 3. Прямая цепочка без циклов
        run("A->B, B->C, C->D", true)
                .include("A\nB\nC\nD");

        // 4. Два независимых цикла
        run("A->B, B->C, C->A, D->E, E->D", true)
                .include("ABC\nDE");

        // 5. Цикл из четырёх и изолированная дуга
        run("A->B, B->C, C->D, D->B, E->F", true)
                .include("A\nBCD\nE\nF");

        // 6. Один треугольный цикл и второй из трёх вершин
        run("A->B, B->C, C->A, C->D, D->E, E->F, F->D", true)
                .include("ABC\nDEF");

        // 7. Две КСС: одна из двух вершин, другая из трёх
        run("A->B, B->A, B->C, C->D, D->E, E->C, E->F", true)
                .include("AB\nCDE\nF");

        // 8. Большой цикл (5 вершин) после двух одиночных
        run("A->B, B->C, C->D, D->E, E->F, F->C", true)
                .include("A\nB\nCDEF");

        // 9. Три несвязанные компоненты (по 3, 3, 2 вершины)
        run("A->B, B->C, C->A, D->E, E->F, F->D, G->H", true)
                .include("ABC\nDEF\nG\nH");

        // 10. Один большой цикл из 5 вершин
        run("A->B, B->C, C->D, D->E, E->A", true)
                .include("ABCDE");

        // 11. Цикл из трёх и цикл из трёх, плюс одиночная вершина
        run("A->B, B->C, C->A, A->D, D->E, E->F, F->D, F->G", true)
                .include("ABC\nDEF\nG");

        // 12. Три независимых КСС, средняя из трёх вершин
        run("A->B, B->C, C->D, D->E, E->F, F->G, G->E, H->I, I->J, J->H", true)
                .include("A\nB\nC\nD\nEFG\nHIJ");

        // 13. Несколько небольших циклов и одиночные вершины
        run("A->B, B->A, C->D, D->E, E->C, F->G, G->H, H->F, I->J", true)
                .include("AB\nCDE\nFGH\nI\nJ");

        // 14. Цикл из трёх вершин и ещё один из трёх, плюс одиночные
        run("A->B, B->C, C->A, D->E, E->F, F->G, G->E, H->I, I -> H", true)
                .include("ABC\nD\nEFG\nHI");

        // 15. Три КСС: 4, 2 и 4 вершины
        run("A->B, B->C, C->D, D->A, E->F, F->E, G->H, H->I, I->J, J->G", true)
                .include("ABCD\nEF\nGHIJ");

        // 16. Смешанная структура: тройка, четвёрка и двойка
        run("A->B, B->C, C->D, D->A, E->F, F->G, G->H, H->E, I->J, J->I", true)
                .include("ABCD\nEFGH\nIJ");

        // 17. Три независимых цикла по 4 вершины
        run("A->B, B->C, C->D, D->A, E->F, F->G, G->H, H->E, I->J, J->K, K->L, L->I", true)
                .include("ABCD\nEFGH\nIJKL");

        // 18. Один большой цикл из 9 вершин
        run("A->B, B->C, C->D, D->E, E->F, F->G, G->H, H->I, I->A", true)
                .include("ABCDEFGHI");

        // 19. Несколько циклов, соединённых направленно
        run("A->B, B->C, C->A, D->E, E->F, F->G, G->H, H->D, I->J, J->K, K->L, L->I, M->N, N->O, O->M", true)
                .include("ABC\nDEFGH\nIJKL\nMNO");

        // 20. Пустой граф (без рёбер)
        run("", true)
                .include("");

        // 21. Изолированные вершины + один цикл
        run("A->B, B->A, C, D", true)
                .include("AB\nC\nD");

        // 22. Несколько одиночных вершин и одна цепочка
        run("A->B, B->C, D, E", true)
                .include("A\nB\nC\nD\nE");

        // === Новые тесты: многосимвольные вершины и лексикографический порядок ===

        // 23. Две многосимвольные вершины в цикле
        run("node1->node2, node2->node1", true)
                .include("node1node2");

        // 24. Три многосимвольные вершины в цикле
        run("x10->x11, x11->x12, x12->x10", true)
                .include("x10x11x12");

        // 25. Проверка лексикографического порядка в КСС
        run("b->a, a->b, c->b, b->c", true)
                .include("abc");

        // 26. Проверка порядка при числовых именах (10 должно идти после 2)
        run("1->2, 2->10, 10->1", true)
                .include("1102"); // ожидается сортировка как "1", "10", "2"

        // 27. Проверка с префиксами ("node1", "node10", "node2")
        run("node1->node2, node2->node10, node10->node1", true)
                .include("node1node10node2"); // лексикографический порядок node1 < node10 < node2

        // 28. Цикл из четырёх многосимвольных узлов
        run("alpha->beta, beta->gamma, gamma->delta, delta->alpha", true)
                .include("alphabetadeltagamma");

        // 29. Две независимые КСС с многосимвольными именами
        run("n1->n2, n2->n1, m1->m2, m2->m3, m3->m1", true)
                .include("m1m2m3\nn1n2");
    }



}